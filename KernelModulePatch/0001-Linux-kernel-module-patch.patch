From 3fa0a53f72170fa41f47cb3c3aea57547ac3687a Mon Sep 17 00:00:00 2001
From: Oleksandr Volkov <oleksandr.v.volkov@globallogic.com>
Date: Thu, 5 Nov 2020 17:25:10 +0200
Subject: [PATCH] Linux kernel module patch Patch with module, that creates
 file in debugfs in which you can write, and after your writting there will be
 added " World" string.

-Modified Makefile in "drivers"

-Modified Kconfig in "drivers"

-Added module "MessageModule" in "drivers"
Signed-off-by: Oleksandr Volkov <oleksandr.v.volkov@globallogic.com>
---
 drivers/Kconfig                       |   2 +
 drivers/Makefile                      |   1 +
 drivers/MessageModule/Kconfig         |   6 ++
 drivers/MessageModule/Makefile        |   8 ++
 drivers/MessageModule/MessageModule.c | 119 ++++++++++++++++++++++++++
 5 files changed, 136 insertions(+)
 create mode 100644 drivers/MessageModule/Kconfig
 create mode 100644 drivers/MessageModule/Makefile
 create mode 100644 drivers/MessageModule/MessageModule.c

diff --git a/drivers/Kconfig b/drivers/Kconfig
index ab4d43923c4d..7a9e774ca1a8 100644
--- a/drivers/Kconfig
+++ b/drivers/Kconfig
@@ -219,4 +219,6 @@ source "drivers/siox/Kconfig"
 
 source "drivers/slimbus/Kconfig"
 
+source "drivers/MessageModule/Kconfig"
+
 endmenu
diff --git a/drivers/Makefile b/drivers/Makefile
index 578f469f72fb..2f6ff5f32cf8 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -186,3 +186,4 @@ obj-$(CONFIG_MULTIPLEXER)	+= mux/
 obj-$(CONFIG_UNISYS_VISORBUS)	+= visorbus/
 obj-$(CONFIG_SIOX)		+= siox/
 obj-$(CONFIG_GNSS)		+= gnss/
+obj-$(CONFIG_MESSAGEMODULE_APP) +=MessageModule/
diff --git a/drivers/MessageModule/Kconfig b/drivers/MessageModule/Kconfig
new file mode 100644
index 000000000000..195b974dc8ff
--- /dev/null
+++ b/drivers/MessageModule/Kconfig
@@ -0,0 +1,6 @@
+config MESSAGEMODULE_APP
+tristate "MessageModule App"
+depends on ARM
+default m
+help
+MessageModule app
diff --git a/drivers/MessageModule/Makefile b/drivers/MessageModule/Makefile
new file mode 100644
index 000000000000..2f0223b6c114
--- /dev/null
+++ b/drivers/MessageModule/Makefile
@@ -0,0 +1,8 @@
+obj-m+=MessageModule.o
+obj-$(CONFIG_MESSAGEMODULE_APP)+=MessageModule.o
+
+all:
+	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules
+
+clean:
+	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean
diff --git a/drivers/MessageModule/MessageModule.c b/drivers/MessageModule/MessageModule.c
new file mode 100644
index 000000000000..81690b25f340
--- /dev/null
+++ b/drivers/MessageModule/MessageModule.c
@@ -0,0 +1,119 @@
+#include <linux/cdev.h>
+#include <linux/debugfs.h>
+#include <linux/fcntl.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+
+MODULE_LICENSE("GPL");
+
+#define MSG_SIZE 7
+#define BUF_SIZE 255
+#define FILE_NAME "test"
+#define DIRECTORY_NAME "traineeTest"
+#define MSG " World\n"
+
+static size_t file_length= 0;
+static char foo_buf[BUF_SIZE];
+static struct dentry *dir = NULL;
+static struct dentry *testFile = NULL;
+
+struct file_data {
+    struct cdev cdev;
+};
+
+static ssize_t file_read(struct file *file, char __user *buf, size_t count,
+            loff_t *f_pos)
+{
+	return simple_read_from_buffer(buf, count, f_pos, foo_buf, BUF_SIZE);
+}
+
+static ssize_t file_write(struct file *file, const char __user *buf, size_t count,
+                    loff_t *f_pos)
+{
+	size_t ret;
+	int tmp = 0;
+	char* msg_pointer = MSG;
+
+	if (*f_pos > BUF_SIZE)
+		return -EINVAL;
+
+	ret = simple_write_to_buffer(foo_buf + file_length, BUF_SIZE, f_pos, buf, count);
+
+	if (ret < 0)
+		return ret;
+
+	ret -= 1;
+	tmp = MSG_SIZE + ret;
+
+	while (ret < tmp) {
+		*(foo_buf + ret++) = *msg_pointer++;
+	}
+
+	*(foo_buf + ret) = '\0';
+	return ret;
+}
+
+static int file_open(struct inode *inode, struct file *filep)
+{
+	struct file_data *my_data;
+	my_data = container_of(inode->i_cdev, struct file_data, cdev);
+	filep->private_data = my_data;
+	return 0;
+}
+
+static const struct file_operations file_fops = {
+	.owner = THIS_MODULE,
+	.open = file_open,
+	.read = file_read,
+	.write = file_write,
+};
+
+void create_file(void)
+{
+	dir = debugfs_lookup(DIRECTORY_NAME, NULL);
+
+	if (!dir) {
+		dir = debugfs_create_dir(DIRECTORY_NAME, NULL);
+
+		if (!dir) {
+			printk(KERN_ALERT "MessageModule: failed to create"
+				" /sys/kernel/debug/traineeTest\n");
+			return;
+		}
+	}
+
+	testFile = debugfs_lookup(FILE_NAME, dir);
+
+	if (!testFile) {
+		testFile = debugfs_create_file(FILE_NAME, 0666, dir,
+		 "", &file_fops);
+
+		if (!testFile) {
+			printk(KERN_ALERT "MessageModule: failed to create"
+				" /sys/kernel/debug/traineeTest/test\n");
+			return;
+		}
+	}
+
+	return;
+}
+
+void delete_file(void)
+{
+	debugfs_remove_recursive(dir);
+}
+
+static int __init msg_init(void)
+{
+	create_file();
+	return 0;
+}
+
+static void __exit msg_exit(void)
+{
+	delete_file();
+}
+
+module_init(msg_init);
+module_exit(msg_exit);
-- 
2.17.1

